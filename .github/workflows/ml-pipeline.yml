name: ML Pipeline

on:
  schedule:
    - cron: '0 0 * * 1'  # Runs monday at midnight UTC
  workflow_dispatch:      # Allows manual triggering
    inputs:
      max_pages:
        description: 'Number of pages to scrape (use "all" for all pages)'
        required: true
        default: 'all'

env:
  PYTHON_VERSION: '3.11'
  DB_SERVER: ${{ secrets.DB_SERVER }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  BLOB_CONNECTION_STRING: ${{ secrets.BLOB_CONNECTION_STRING }}
  BLOB_CONTAINER_NAME: ${{ secrets.BLOB_CONTAINER_NAME }}
  MAX_PAGES: ${{ github.event.inputs.max_pages}}

jobs:
  selling-properties:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Chrome and ChromeDriver
        run: |
          # Install Google Chrome
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Debug Chrome installation
          which google-chrome
          google-chrome --version
          
          # Use Chrome for Testing for versions 115+
          CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f3)
          CHROME_MAJOR=$(echo $CHROME_VERSION | cut -d '.' -f1)
          
          echo "Chrome major version: $CHROME_MAJOR"
          
          # Download and install appropriate ChromeDriver
          wget -q -O chrome-versions.json https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json
          
          CHROMEDRIVER_URL=$(jq -r ".versions[] | select(.version | startswith(\"$CHROME_MAJOR.\")) | .downloads.chromedriver[] | select(.platform==\"linux64\") | .url" chrome-versions.json | head -1)
          echo "ChromeDriver URL: $CHROMEDRIVER_URL"
          
          wget -q "$CHROMEDRIVER_URL" -O chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/bin/chromedriver
          sudo chown root:root /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver
          chromedriver --version
          
      - name: Debug environment
        run: |
          echo "Environment check:"
          which python
          python --version
          which google-chrome
          google-chrome --version
          which chromedriver
          chromedriver --version
          echo "Network check:"
          curl -I https://www.aruodas.lt/
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk python3-dev gcc libx11-dev libxext-dev
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install SQL Server ODBC Driver and Tools
        run: |
          echo 'Installing Microsoft SQL Server ODBC Driver'
          # Remove possible duplicate sources list
          sudo rm -f /etc/apt/sources.list.d/mssql-release.list
            
          # Setup Microsoft repository with current methods
          sudo apt-get update
          sudo apt-get install -y curl gnupg
            
          # Clean up any existing Microsoft repository configurations
          sudo rm -f /usr/share/keyrings/microsoft-prod.gpg
          sudo rm -f /etc/apt/sources.list.d/mssql-release.list
            
          # Import Microsoft GPG key
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
            
          # Add Microsoft repository for SQL tools (using Ubuntu 22.04)
          curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
            
          sudo apt-get update
            
          # Install ODBC Driver with verification
          echo 'Installing ODBC Driver'
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
          
          # List driver files for debugging
          echo "Checking ODBC driver files:"
          ls -l /opt/microsoft/msodbcsql18/lib64/
          
          # Verify driver installation
          if [ ! -f /opt/microsoft/msodbcsql18/lib64/libmsodbcsql-18.*.so.* ]; then
            echo "ODBC driver file not found!"
            exit 1
          fi
          
          # List installed ODBC drivers
          echo "Installed ODBC drivers:"
          odbcinst -j
          odbcinst -q -d

      - name: Update scraper config
        run: |
          sed -i "s/'max_pages': '[^']*'/'max_pages': '${{ env.MAX_PAGES }}'/" aruodas_scraper/config/settings.py
          sed -i "s/'category': '[^']*'/'category': 'butai'/" aruodas_scraper/config/settings.py
          
      - name: Run selling properties pipeline
        env: 
          DB_SERVER: ${{ secrets.DB_SERVER }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          BLOB_CONNECTION_STRING: ${{ secrets.BLOB_CONNECTION_STRING }}
          BLOB_CONTAINER_NAME: ${{ secrets.BLOB_CONTAINER_NAME }}
          HOME_PROXY: ${{ secrets.HOME_PROXY }}
        run: python main.py

  rental-properties:
    needs: selling-properties
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install SQL Server ODBC Driver and Tools
        run: |
          echo 'Installing Microsoft SQL Server ODBC Driver'
          # Remove possible duplicate sources list
          sudo rm -f /etc/apt/sources.list.d/mssql-release.list
          
          # Setup Microsoft repository with current methods
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          
          # Clean up any existing Microsoft repository configurations
          sudo rm -f /usr/share/keyrings/microsoft-prod.gpg
          sudo rm -f /etc/apt/sources.list.d/mssql-release.list
          
          # Import Microsoft GPG key
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          
          # Add Microsoft repository for SQL tools (using Ubuntu 22.04)
          curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          
          sudo apt-get update
          
          # Install ODBC Driver with verification
          echo 'Installing ODBC Driver'
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
          
          # List driver files for debugging
          echo "Checking ODBC driver files:"
          ls -l /opt/microsoft/msodbcsql18/lib64/
          
          # Verify driver installation
          if [ ! -f /opt/microsoft/msodbcsql18/lib64/libmsodbcsql-18.*.so.* ]; then
            echo "ODBC driver file not found!"
            exit 1
          fi
          
          # List installed ODBC drivers
          echo "Installed ODBC drivers:"
          odbcinst -j
          odbcinst -q -d
          
      - name: Install Chrome and ChromeDriver
        run: |
          # Install Google Chrome
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Debug Chrome installation
          which google-chrome
          google-chrome --version
          
          # Use Chrome for Testing for versions 115+
          CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f3)
          CHROME_MAJOR=$(echo $CHROME_VERSION | cut -d '.' -f1)
          
          echo "Chrome major version: $CHROME_MAJOR"
          
          # Download and install appropriate ChromeDriver
          wget -q -O chrome-versions.json https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json
          
          CHROMEDRIVER_URL=$(jq -r ".versions[] | select(.version | startswith(\"$CHROME_MAJOR.\")) | .downloads.chromedriver[] | select(.platform==\"linux64\") | .url" chrome-versions.json | head -1)
          echo "ChromeDriver URL: $CHROMEDRIVER_URL"
          
          wget -q "$CHROMEDRIVER_URL" -O chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/bin/chromedriver
          sudo chown root:root /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver
          chromedriver --version
          
      - name: Debug environment
        run: |
          echo "Environment check:"
          which python
          python --version
          which google-chrome
          google-chrome --version
          which chromedriver
          chromedriver --version
          echo "Network check:"
          curl -I https://www.aruodas.lt/
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk python3-dev gcc libx11-dev libxext-dev
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Update scraper config
        run: |
          sed -i "s/'max_pages': '[^']*'/'max_pages': '${{ env.MAX_PAGES }}'/" aruodas_scraper/config/settings.py
          sed -i "s/'category': '[^']*'/'category': 'butu-nuoma'/" aruodas_scraper/config/settings.py
          
      - name: Run rental properties pipeline
        env: 
          DB_SERVER: ${{ secrets.DB_SERVER }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          BLOB_CONNECTION_STRING: ${{ secrets.BLOB_CONNECTION_STRING }}
          BLOB_CONTAINER_NAME: ${{ secrets.BLOB_CONTAINER_NAME }}
          HOME_PROXY: ${{ secrets.HOME_PROXY }}
        run: python main.py
